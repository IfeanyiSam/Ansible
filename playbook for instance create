---
- name: Deploy EC2 Instances, Install Services, and Deploy Static Website
  hosts: localhost
  gather_facts: true
  tasks:
    # Create an SSH key pair to use for instances
    - name: Create Key Pair
      ec2_key:
        region: "{{ aws_region }}"  # Replace with your AWS region, e.g., us-east-1
        name: my_key_pair  # Provide a name for your key pair
      register: key_pair

    # Create a CentOS instance if the target system is CentOS
    - name: Create CentOS instance
      ec2:
        region: "{{ aws_region }}"  # Replace with your AWS region, e.g., us-east-1
        key_name: my_key_pair  # Use the name of the key pair created above
        instance_type: t2.micro  # Specify your desired instance type
        image: "{{ centos_image }}"  # Replace with CentOS AMI ID for your region
        count: 1
        instance_tags:
          Name: CentOS_Instance  # Tag your instance with a name
        security_groups:
          - my_security_group  # Replace with actual security group name or ID
      register: centos_instance
      when: "'CentOS' in ansible_distribution"  # Conditionally create only on CentOS

    # Create an Ubuntu instance if the target system is Ubuntu
    - name: Create Ubuntu instance
      ec2:
        region: "{{ aws_region }}"  # Replace with your AWS region, e.g., us-east-1
        key_name: my_key_pair  # Use the name of the key pair created above
        instance_type: t2.micro  # Specify your desired instance type
        image: "{{ ubuntu_image }}"  # Replace with Ubuntu AMI ID for your region
        count: 1
        instance_tags:
          Name: Ubuntu_Instance  # Tag your instance with a name
        security_groups:
          - my_security_group  # Replace with actual security group name or ID
      register: ubuntu_instance
      when: "'Ubuntu' in ansible_distribution"  # Conditionally create only on Ubuntu

    # Install packages based on OS distribution (httpd for CentOS, apache2 for Ubuntu)
    - name: Install packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - "{{ 'httpd' if 'CentOS' in ansible_distribution else 'apache2' }}"
        - unzip   # Add unzip package
        - wget    # Add wget package

    # Start and enable the web server service based on OS distribution
    - name: Start and enable the web server service
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - "{{ 'httpd' if 'CentOS' in ansible_distribution else 'apache2' }}"

    # Create a directory for the website files
    - name: Create website directory
      file:
        path: /var/www/html/
        state: directory

    # Download website files from a URL
    - name: Download website files
      get_url:
        url: "http://example.com/static_website.zip"  # Replace with actual URL
        dest: /tmp/static_website.zip

    # Unzip the website files to the web server directory
    - name: Unzip website files
      unarchive:
        src: /tmp/static_website.zip
        dest: /var/www/html/
        remote_src: yes

    # Set proper permissions for the web server directory
    - name: Set proper permissions
      file:
        path: /var/www/html/
        recurse: yes
        owner: apache  # Replace with appropriate user/group
        group: apache  # Replace with appropriate user/group

    # Restart the web server service
    - name: Restart Apache
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - "{{ 'httpd' if 'CentOS' in ansible_distribution else 'apache2' }}"
